{
	"info": {
		"_postman_id": "3d332365-84ba-425d-8929-220930df84c4",
		"name": "Postman_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1234",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login?login=Alex&password=1234",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "Alex"
						},
						{
							"key": "password",
							"value": "1234"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Json-schema validation\", function () {const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"    \"person\" : {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"u_age\": {\r",
							"               \"type\": \"integer\"\r",
							"            },\r",
							"            \"u_name\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": [\r",
							"                    {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    {\r",
							"                        \"type\": \"integer\"\r",
							"                    },\r",
							"                    { \r",
							"                        \"type\": \"integer\"\r",
							"                    }\r",
							"                ]\r",
							"            },\r",
							"            \"u_salary_1_5_year\": {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        \r",
							"        },\r",
							"        \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_ 12_months\": {\r",
							"        \"type\": \"integer\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"       \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"        \"type\": \"integer\"\r",
							"    }\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"let req = JSON.parse(request.data);\r",
							"let resp = pm.response.json();\r",
							"let salary = req.salary;\r",
							"let resp_salary_1 = resp.qa_salary_after_6_months;\r",
							"let resp_salary_2 = resp.qa_salary_after_12_months;\r",
							"let resp_salary_3 = resp.person.u_salary_1_5_year;\r",
							"\r",
							"pm.test(\"Comparison\", function(){\r",
							" pm.expect(salary*2).to.equal(resp_salary_1);\r",
							"});\r",
							"\r",
							"pm.test(\"Comparison\", function(){\r",
							" pm.expect(salary*2.9).to.equal(resp_salary_2);\r",
							"});\r",
							"\r",
							"pm.test(\"Comparison\", function(){\r",
							" pm.expect(salary*4).to.equal(resp_salary_3);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"resp_salary\", resp.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"age\":22,\r\n \"salary\":600,\r\n \"name\":\"Alex\",\r\n \"auth_token\":\"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Json-schema validation\", function () {const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"       \"age\": {\r",
							"           \"type\": \"integer\"\r",
							"       },\r",
							"       \"name\": {\r",
							"           \"type\": \"string\"\r",
							"       },\r",
							"       \"salary\": {\r",
							"           \"type\": \"array\",\r",
							"           \"items\": [\r",
							"               {\r",
							"                   \"type\": \"integer\"\r",
							"               },\r",
							"               {\r",
							"                   \"type\": \"string\"\r",
							"               },\r",
							"               {\r",
							"                   \"type\": \"string\"\r",
							"               }\r",
							"           ]\r",
							"       },\r",
							"    }, \r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"       ]   \r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"let req = JSON.parse(request.data.salary);\r",
							"let resp = pm.response.json();\r",
							"let resp_salary_0 = resp.salary[0];\r",
							"let resp_salary_1 = resp.salary[1];\r",
							"let resp_salary_2 = resp.salary[2];\r",
							"console.log(req*2)\r",
							"console.log(resp_salary_2)\r",
							"\r",
							"pm.test(\"Comparison\", function(){\r",
							" pm.expect(req==resp_salary_0).to.have.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Comparison\", function(){\r",
							" pm.expect(req*2==resp_salary_1).to.have.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Comparison\", function(){\r",
							" pm.expect(req*3==resp_salary_2).to.have.true;\r",
							"});\r",
							"\r",
							"pm.test(\"More or less\", function(){\r",
							"    pm.expect(resp_salary_2>resp_salary_0).to.have.true;\r",
							"})\r",
							"pm.test(\"More or less\", function(){\r",
							"    pm.expect(resp_salary_2>resp_salary_1).to.have.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Json-schema validation\", function () {const schema = {\r",
							" \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"let req = JSON.parse(request.data.weight);\r",
							"let resp = pm.response.json();\r",
							"let daily_food_coef = resp.daily_food;\r",
							"let daily_sleep_coef = resp.daily_sleep;\r",
							"console.log(daily_food_coef)\r",
							"\r",
							"pm.test(\"Comparison\", function(){\r",
							" pm.expect(req*0.012).to.equal(daily_food_coef);\r",
							"});\r",
							"\r",
							"pm.test(\"Comprasion\", function(){\r",
							"    pm.expect(req*2.5).to.equal(daily_sleep_coef);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "70",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Json-schema validation\", function () {const schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"let req = JSON.parse(request.data.age);\r",
							"let resp = pm.response.json();\r",
							"let resp_name = resp.name;\r",
							"let name = environment.name;\r",
							"let req_age = req;\r",
							"let resp_age = resp.age;\r",
							"console.log(resp_age);\r",
							"console.log(req_age);\r",
							"\r",
							"pm.test(\"Comparison_name\", function(){\r",
							"    pm.expect(resp_name==name).to.have.true;\r",
							"})\r",
							"\r",
							"pm.test(\"Comparison_age\", function(){\r",
							"  pm.expect(req_age==resp_age).to.have.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{resp_salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let currency = pm.response.json();\r",
							"let ran_currency = currency[Math.floor(Math.random()*currency.length)];\r",
							"let ran_cur_id = ran_currency.Cur_ID;\r",
							"console.log(ran_currency);\r",
							"console.log(ran_cur_id);\r",
							"\r",
							"pm.environment.set(\"random_Cur_ID\", ran_currency.Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Json-schema validation\", function () {const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{random_Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}